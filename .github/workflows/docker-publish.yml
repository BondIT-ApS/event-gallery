name: 🚀 LEGO Production Build & Deploy

on:
  push:
    branches: [main]
  workflow_dispatch:

permissions:
  contents: read
  packages: write

jobs:
  # 🏢 Production LEGO Assembly Line
  production-build:
    name: 🐳 Build Event Gallery Docker Image
    runs-on: ubuntu-latest

    steps:
      - name: 📎 Get LEGO Instructions (Checkout)
        uses: actions/checkout@v5

      - name: 🌍 Set up Multi-Platform Builder (QEMU)
        uses: docker/setup-qemu-action@v3

      - name: 🔧 Prepare Assembly Line (Docker Buildx)
        uses: docker/setup-buildx-action@v3
        id: buildx

      - name: 🔑 Connect to LEGO Warehouse (Docker Hub)
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: 🏷️ Generate Semantic Version Tag
        id: version
        run: |
          # Generate YY.M format from current date
          YEAR_MONTH=$(date +'%y.%-m')
          
          # Use GitHub run number as patch version for simplicity
          # This ensures each build gets an incrementing patch number
          PATCH_VERSION="${{ github.run_number }}"
          
          # Create semantic version: YY.M.PATCH
          VERSION="${YEAR_MONTH}.${PATCH_VERSION}"
          YEAR_MONTH_TAG="${YEAR_MONTH}"
          
          # Set environment variables for use in subsequent steps
          echo "version=${VERSION}" >> "$GITHUB_ENV"
          echo "year_month=${YEAR_MONTH_TAG}" >> "$GITHUB_ENV"
          
          echo "🏷️ Building semantic version: ${VERSION}"
          echo "📅 Year/Month tag: ${YEAR_MONTH_TAG}"
          echo "🔢 Run number: ${PATCH_VERSION}"

      - name: 🏢 Build & Push Event Gallery Docker Image
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: |
            maboni82/event-gallery:latest
            maboni82/event-gallery:${{ env.version }}
            maboni82/event-gallery:${{ env.year_month }}
          builder: ${{ steps.buildx.outputs.name }}
          platforms: linux/amd64,linux/arm64
          cache-from: type=gha
          cache-to: type=gha,mode=max
